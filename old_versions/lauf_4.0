#!/bin/sh
########################################################
# Lauf v0.4.0                                          #
# (c) 2010 joshua.redfield(AT)gmail.com                #
# Dependencies: Coreutils, Zenity, Notify-OSD          #
########################################################
########################################################
#   Global Variables                                   #
########################################################
lauf_app_dir=$(dirname $0) #Application Directory
lauf_app_icon="${lauf_app_dir}/icons/lauf.png" #Application Icon
lauf_version="0.4.0" #Application Version
lauf_app_name="Lauf v${lauf_version}" #Application Name
lauf_app_motto="A lightweight application and task launcher" #Application motto
lauf_core_dir="${lauf_app_dir}/core" #Core Plugin Directory
lauf_plugin_dir="${lauf_app_dir}/plugins" #Plugin Directory
. "${lauf_app_dir}/lauf.cfg" #Read user-editable variables
_master=$(whoami) #Get users username
########################################################
# Functions                                            #
########################################################
yarra () { #yarra "variable_name" "string"
    name=$1
    OLDIFS=$IFS #Keep system IFS
    IFS=" " #Assing new IFS 
    set -- "$2" #yarra "name" "$2"
    IFS=$OLDIFS  #Re-assign IFS
    count=0 #Set count to 0
    for fake in $@
    do
        count=$(($count+1)) #Increase count by one per word spererated by delimiter
        export $name$count="$fake" #Export and create a new variable name for each word. yarra "$1" "words"
    done
}
lauf_notify () { #lauf_notify "Breif Message" "Full Message"
if [ $lauf_notify_style = "notify-osd" ]; then #Use notify-send
    notify-send --icon="${lauf_app_icon}" "$1" "$2"
elif [ $lauf_notify_style = "message" ]; then #Use Zenity messagebox
    zenity --window-icon="${lauf_app_icon}" --title="$1" --text="$1\n$2" --info --timeout="5"
elif [ $lauf_notify_style = "none" ]; then #Simply output to terminal
    echo "$(basename $0): $1
      $2"
else #Else default to notify-send
    notify-send --icon="${lauf_app_icon}" "$1" "$2"
fi
}
########################################################
#   Command Line Arguements                            #
########################################################
case $1 in
"-p" | "--plugin")
    yarra "lauf_exec" "$2 $3 $4 $5 $6"
    lauf_notify_style="none" #Force terminal output
    if [ -f "${lauf_core_dir}/$lauf_exec1.sh" ]; then #Check if users input was a core plugin
        . "${lauf_core_dir}/$lauf_exec1.sh" #Execute a core plugin
    else [ -x "${lauf_plugin_dir}/$lauf_exec1.sh" ] #Check if users input was plugin
        . "${lauf_plugin_dir}/$lauf_exec1.sh" #Execute a external plugin
    fi
    exit
;;
"-d" | "--debug")
    echo "Starting Debug Mode"
    echo "-------------------"
    sh -xv $0 #Run sh in debug and verbose mode
;;
"-h" | "--help")
    echo "$lauf_app_name"
    echo "${lauf_app_motto}"
    echo "(c) 2010 joshua.redfield(AT)gmail.com"
    echo "Directory: $lauf_app_dir"
    echo "Plugin Directory: $lauf_plugin_dir"
    echo "------------------------------------------"
    echo "Usage: lauf [OPTION...]"
    echo "       -p --plugin run a lauf plugin"
    echo "       -d --debug  run lauf in debug mode"
    echo "       -h --help   show this message"
    exit
;;
esac
########################################################
# Application Code                                     #
########################################################
lauf_exec=$(zenity --entry --width=${lauf_width} --window-icon=$lauf_app_icon --title="${lauf_app_name}" --text="What do you need ${_master}?\nTip: type help if you're confused" --timeout="${lauf_app_timeout}")
case $? in #Check error message of zenity. 0 = Okay, 1 = Close
0) #Okay
    if [ -n "${lauf_exec}" ]; then #Before doing anything, Make the user actually typed something
    lauf_exec=$(echo ${lauf_exec} | tr '[A-Z]' '[a-z]') #Convert uppercase to lowercase| 
    yarra "lauf_exec" "${lauf_exec}" #Split lauf_exec, assign a new var for each word
        if [ $lauf_exec1 = "~" ]; then #Check if '~' was entered
            _last_command=$(cat "${lauf_app_dir}/.last_command")
            if [ -f "${lauf_core_dir}/$_last_command.sh" ]; then #Check if '~' was a core plugin
                . "${lauf_core_dir}/$_last_command.sh"; #Execute core plugin
            elif [ -x "${lauf_plugin_dir}/$_last_command.sh" ]; then #Check if '~' was a plugin and is activated
                . "${lauf_plugin_dir}/$_last_command.sh" #Execute plugin
            elif type "${_last_command}"; then #Check if '~' was a command/application
                exec "${_last_command}" #Execute command
            else
                exec $0 #Else re-execute application
            fi
        elif [ $lauf_exec1 = "$" ]; then #Check if command needs terminal output
            cd $HOME
            _output=${lauf_exec#"$"}
            lauf_notify "Running Command" "$_output"
            $_output | zenity --width=${lauf_width} --height=$(($lauf_height-200)) --window-icon=$lauf_app_icon --list --editable --title  "${lauf_app_name}" --text="" --column "${lauf_exec2}'s output:" #Execute command and grab output
            exit
        elif [ $lauf_exec1 = "#!" ]; then #Check if command is bash style
            _bash=${lauf_exec#"#!"}
            lauf_notify "Running Command" "Bash: $_bash"
            bash -c "$_bash" #Execute bash with entered command
            exit
        elif [ -f "${lauf_core_dir}/$lauf_exec1.sh" ]; then #Check if users input was a core plugin
            echo $lauf_exec1 > "${lauf_app_dir}/.last_command" #Last command
            . "${lauf_core_dir}/$lauf_exec1.sh" #Execute a core plugin
        elif [ -x "${lauf_plugin_dir}/$lauf_exec1.sh" ]; then #Check if users input was plugin
            echo $lauf_exec1 > "${lauf_app_dir}/.last_command" #Last command
            . "${lauf_plugin_dir}/$lauf_exec1.sh" #Execute a external plugin
        elif type "$lauf_exec1" >/dev/null; then #Check if users input was a command, and if that application exist
            echo $lauf_exec1 > "${lauf_app_dir}/.last_command" #Last command
            lauf_notify "Running Application:" "$lauf_exec"
            exec $lauf_exec #Execute command
        else
            exec $0  #Re-Execute application
        fi
    fi
;;
#######################################################
# Cancel button was pressed, exit program.            #
#######################################################
1)    
exit
;;
esac
