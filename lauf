#!/bin/sh
########################################################
# Lauf
# (c) 2010 joshua.redfield(AT)gmail.com
# (c) 2010 hunterm.haxxr(AT)gmail.com
# Dependencies: Coreutils, Zenity, Notify-OSD
########################################################
########################################################
#   One Instance
########################################################
LAUF_LOCK='/tmp/LAUF_LOCK.txt'
if [ -e ${LAUF_LOCK} ] && kill -0 $(cat ${LAUF_LOCK}) 2>/dev/null; then #Check if $LAUF_LOCK exist and if Lauf's PID is running
    exit
else
    rm -f ${LAUF_LOCK} #Remove $LAUF_LOCK
fi
echo $$ > ${LAUF_LOCK}
trap "rm -f ${LAUF_LOCK}; exit" INT TERM EXIT #Trap for removing the lockfile
########################################################
#   Global Variables
########################################################
readonly lauf_app_dir=$(dirname $0) #Application Directory
readonly lauf_app_icon="${lauf_app_dir}/icons/lauf.png" #Application Icon
readonly lauf_version="Dev" #Application Version
readonly lauf_app_name="Lauf" #Application Name
readonly lauf_app_motto="A lightweight application and task launcher" #Application motto
readonly lauf_core_dir="${lauf_app_dir}/core" #Core Plugin Directory
readonly lauf_plugin_dir="${lauf_app_dir}/plugins" #Plugin Directory
. "${lauf_app_dir}/lauf.cfg" #Read user-editable variables
readonly lauf_app_options="--class=Lauf --name=Lauf --window-icon=$lauf_app_icon --timeout=$lauf_app_timeout"
_master=$USER #Get users username
########################################################
# Functions
########################################################
yarra () { #yarra "variable_name" "string"
    name=$1
    OLDIFS=$IFS #Keep system IFS
    IFS=" " #Assign new IFS
    set -- "$2" #yarra "name" "$2"
    IFS=$OLDIFS  #Re-assign IFS
    count=0 #Set count to 0
    for fake in $@
    do
        count=$(($count+1)) #Increase count by one per word spererated by delimiter
        export $name$count="$fake" #Export and create a new variable name for each word. yarra "$1" "words"
    done
}
lauf_notify () { #lauf_notify "Brief Message" "Full Message"
if [ $lauf_notify_style = "notify-osd" ]; then #Use notify-send
	_timeout=$(($lauf_notify_timeout*1000)) #Convert seconds to milliseconds
    notify-send --icon="${lauf_app_icon}" "$1" "$2" --expire-time=$_timeout
elif [ $lauf_notify_style = "message" ]; then #Use Zenity messagebox
    zenity $lauf_app_options --title="$1" --text="$2" --info
else #Else default to notify-send
    _timeout=$(($lauf_notify_timeout*1000)) #Convert seconds to milliseconds
    notify-send --icon="${lauf_app_icon}" "$1" "$2" --expire-time=$_timeout
fi
}
lauf_cancel() { #Allows plugins to play nice with running only one instance
    rm -f ${LAUF_LOCK}
    exec $0
}
########################################################
#   Command Line Options
########################################################
case $1 in
"-p" | "--plugin")
    lauf_exec="$2 $3 $4 $5 $6 $7 $8 $9 $10"
    yarra "lauf_exec" "$lauf_exec" #9 total arguements from commandline
    if [ -f "${lauf_core_dir}/$lauf_exec1.sh" ]; then #Check if users input was a core plugin
        . "${lauf_core_dir}/$lauf_exec1.sh" #Execute a core plugin
    else [ -x "${lauf_plugin_dir}/$lauf_exec1.sh" ] #Check if users input was plugin
        . "${lauf_plugin_dir}/$lauf_exec1.sh" #Execute a external plugin
    fi
    exit
;;
"-d" | "--debug")
    rm -f ${LAUF_LOCK}
    clear
    echo "Starting in Debug Mode"
    echo "-------------------"
    sh -xv $0 #Run sh in debug and verbose mode
;;
"-h" | "--help")
    echo "$lauf_app_name"
    echo "${lauf_app_motto}"
    echo "(c) 2010 joshua.redfield(AT)gmail.com"
    echo "(c) 2010 hunterm.haxxr@gmail.com"
    echo "Directory: $lauf_app_dir"
    echo "Plugin Directory: $lauf_plugin_dir"
    echo "------------------------------------------"
    echo "Usage: lauf [ OPTION | [ PLUGIN... ] ]"
    echo "       -p --plugin run a lauf plugin"
    echo "       -d --debug  run lauf in debug mode"
    echo "       -h --help   show this message"
    exit
;;
esac
########################################################
# Application Code
########################################################
lauf_exec=$(zenity $lauf_app_options --entry --width=$lauf_width --title="$lauf_app_name" --text="What do you need ${_master}?\nTip: type help if you're confused")
case $? in #Check exit code of zenity. 0 = Okay, 1 = Close
0) #Okay
    if [ -n "${lauf_exec}" ]; then #Before doing anything, Make sure the user typed something in
    lauf_exec_try=$(echo ${lauf_exec}) # try it with just the caps and such it already has
    lauf_exec=$(echo ${lauf_exec} | tr '[A-Z]' '[a-z]') # convert uppercase chars to lowercase ones
    yarra "lauf_exec" "${lauf_exec}" #Split lauf_exec, assign a new var. lauf_exec1=command/plugin, lauf_exec2=arg1, etc.
        if [ $lauf_exec1 = "~" ]; then #Check if '~' was entered
            _last_command=$(cat "${lauf_app_dir}/.last_command")
            if [ -f "${lauf_core_dir}/$_last_command.sh" ]; then #Check if '~' was a core plugin
                . "${lauf_core_dir}/$_last_command.sh"; #Execute core plugin
            elif [ -x "${lauf_plugin_dir}/$_last_command.sh" ]; then #Check if '~' was a plugin and is activated
                . "${lauf_plugin_dir}/$_last_command.sh" #Execute plugin
            elif type "${_last_command}"; then #Check if '~' was a command/application
                exec "${_last_command}" #Execute command
            else
                exec $0 #Else re-execute application
            fi
        elif [ $lauf_exec1 = "$" ]; then #Check if command needs terminal output
            cd $HOME
            _output=${lauf_exec#"$"}
            lauf_notify "Running Terminal Command" "$_output"
            $_output | zenity $lauf_app_options --width=${lauf_width} --height=$(($lauf_height-200)) --list --editable --title  "${lauf_app_name}" --text="${lauf_exec2}'s output:" --column "" --hide-header #Execute command and grab output
            exit
        elif [ $lauf_exec1 = "#!" ]; then #Check if command is bash style
            _bash=${lauf_exec#"#!"}
            lauf_notify "Running Bash Command" "$_bash"
            bash -c "$_bash" #Execute bash with entered command
            exit
        elif [ -f "${lauf_core_dir}/$lauf_exec1.sh" ]; then #Check if users input was a core plugin
            echo $lauf_exec1 > "${lauf_app_dir}/.last_command" #Last command
            . "${lauf_core_dir}/$lauf_exec1.sh" #Execute a core plugin
        elif [ -x "${lauf_plugin_dir}/$lauf_exec1.sh" ]; then #Check if users input was plugin
            echo $lauf_exec1 > "${lauf_app_dir}/.last_command" #Last command
            . "${lauf_plugin_dir}/$lauf_exec1.sh" #Execute a external plugin
        elif type "$lauf_exec1" >/dev/null; then #Check if users input was a command, and if that application exists
            test_time=${lauf_exec#*' for '}
            test_command=${lauf_exec%' for '*}
            for lauf_arg in $lauf_exec
            do
                if [ $lauf_arg = "for" ]; then
                found_for='true'
                break #Stop once it's found
                fi
            done
            if [ ${found_for:="unset"} = "true" ]; then
                lauf_notify "Running application:" "$test_command for duration of $test_time"
                echo $test_command > "${lauf_app_dir}/.last_command"
                command timeout $test_time $test_command
            else
                lauf_notify "Running application:" "$lauf_exec"
                 echo $lauf_exec > "${lauf_app_dir}/.last_command"
                command $lauf_exec 2>/dev/null
                if [ ! $? = "0" ]; then #If command is not sucessful, $lauf_exec_try
                    echo $lauf_exec_try > "${lauf_app_dir}/.last_command"
                    command $lauf_exec_try 2>/dev/null
                fi
            fi
            exit
        else
            lauf_cancel  #Re-Execute application
        fi
    fi
;;
#######################################################
# Cancel button was pressed, exit program.
#######################################################
1)
exit
;;
esac
rm -f ${LOCKFILE}
